@model BangloreTalkies.Models.MoviesViewModel
@{
    ViewData["Title"] = "Movies";
}

<!-- Movies Hero Section -->
<section>
        <div>
        <!-- Movies Hero Swiper -->
        @if (Model.HeroMovies != null && Model.HeroMovies.Any())
        {
            @await Html.PartialAsync("_MovieSwiper", Model.HeroMovies)
        }
    </div>
</section>

<!-- Filters Section -->
<section class="filters-section">
    <div class="container">
        <div class="filters-container">
            <!-- Language Filters -->
            <div class="filter-group">
                <label class="filter-label">Languages</label>
                <div class="filter-buttons">
                    <button class="filter-btn active" data-filter="all">All</button>
                    <button class="filter-btn" data-filter="hindi">Hindi</button>
                    <button class="filter-btn" data-filter="english">English</button>
                    <button class="filter-btn" data-filter="punjabi">Punjabi</button>
                    <button class="filter-btn" data-filter="tamil">Tamil</button>
                    <button class="filter-btn" data-filter="telugu">Telugu</button>
                </div>
            </div>

            <!-- Genre Filters -->
            <div class="filter-group">
                <label class="filter-label">Genres</label>
                <div class="filter-buttons">
                    <button class="filter-btn" data-genre="action">Action</button>
                    <button class="filter-btn" data-genre="comedy">Comedy</button>
                    <button class="filter-btn" data-genre="drama">Drama</button>
                    <button class="filter-btn" data-genre="thriller">Thriller</button>
                    <button class="filter-btn" data-genre="romance">Romance</button>
                </div>
            </div>

            <!-- Format Filters -->
            <div class="filter-group">
                <label class="filter-label">Format</label>
                <div class="filter-buttons">
                    <button class="filter-btn" data-format="2d">2D</button>
                    <button class="filter-btn" data-format="3d">3D</button>
                    <button class="filter-btn" data-format="imax">IMAX</button>
                    <button class="filter-btn" data-format="4dx">4DX</button>
                </div>
            </div>

            <!-- Clear Filters -->
            <div class="filter-actions">
                <button class="clear-filters-btn">Clear All</button>
            </div>
        </div>
    </div>
</section>

<!-- Premiering This Week -->
<section class="content-section">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">Premiering This Week</h2>
            <div class="section-actions">
                <button class="view-toggle active" data-view="grid">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zM2.5 2a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zM1 10.5A1.5 1.5 0 0 1 2.5 9h3A1.5 1.5 0 0 1 7 10.5v3A1.5 1.5 0 0 1 5.5 15h-3A1.5 1.5 0 0 1 1 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 9h3a1.5 1.5 0 0 1 1.5 1.5v3a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"/>
                    </svg>
                </button>
                <button class="view-toggle" data-view="list">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="movies-grid" data-view="grid">
            @foreach (var movie in Model.PremieringThisWeek)
            {
                <div class="movie-card" data-id="@movie.Id" data-language="@movie.Language.ToLower()" data-genre="@movie.Genre.ToLower()">
                    <div class="card-image">
                        <img src="@movie.ImageUrl" alt="@movie.Title" loading="lazy" />
                        <div class="card-overlay">
                            <button class="like-btn @(movie.IsLiked ? "liked" : "")" data-id="@movie.Id" data-type="movie">
                                <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                                </svg>
                            </button>
                            <div class="card-actions">
                                <button class="action-btn book-tickets" data-movie-id="@movie.Id">Book Tickets</button>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(movie.Status))
                        {
                            <div class="card-badge status-badge">@movie.Status</div>
                        }
                    </div>
                    <div class="card-content">
                        <h3 class="card-title">@movie.Title</h3>
                        <div class="card-meta">
                            <span class="card-rating">@movie.Rating</span>
                            <span class="card-separator">•</span>
                            <span class="card-language">@movie.Language</span>
                            @if (!string.IsNullOrEmpty(movie.Duration))
                            {
                                <span class="card-separator">•</span>
                                <span class="card-duration">@movie.Duration</span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(movie.Genre))
                        {
                            <div class="card-genre">@movie.Genre</div>
                        }
                        <div class="card-price">@movie.Price</div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<!-- Now Showing -->
<section class="content-section">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">Now Showing</h2>
        </div>
        
        <div class="movies-grid">
            @foreach (var movie in Model.NowShowing)
            {
                <div class="movie-card" data-id="@movie.Id" data-language="@movie.Language.ToLower()" data-genre="@movie.Genre.ToLower()">
                    <div class="card-image">
                        <img src="@movie.ImageUrl" alt="@movie.Title" loading="lazy" />
                        <div class="card-overlay">
                            <button class="like-btn @(movie.IsLiked ? "liked" : "")" data-id="@movie.Id" data-type="movie">
                                <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                                </svg>
                            </button>
                            <div class="card-actions">
                                <button class="action-btn book-tickets" data-movie-id="@movie.Id">Book Tickets</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <h3 class="card-title">@movie.Title</h3>
                        <div class="card-meta">
                            <span class="card-rating">@movie.Rating</span>
                            <span class="card-separator">•</span>
                            <span class="card-language">@movie.Language</span>
                            @if (!string.IsNullOrEmpty(movie.Duration))
                            {
                                <span class="card-separator">•</span>
                                <span class="card-duration">@movie.Duration</span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(movie.Genre))
                        {
                            <div class="card-genre">@movie.Genre</div>
                        }
                        <div class="card-price">@movie.Price</div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<!-- Coming Soon -->
<section class="content-section">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">Coming Soon</h2>
        </div>
        
        <div class="movies-grid">
            @foreach (var movie in Model.ComingSoon)
            {
                <div class="movie-card" data-id="@movie.Id" data-language="@movie.Language.ToLower()" data-genre="@movie.Genre.ToLower()">
                    <div class="card-image">
                        <img src="@movie.ImageUrl" alt="@movie.Title" loading="lazy" />
                        <div class="card-overlay">
                            <button class="like-btn @(movie.IsLiked ? "liked" : "")" data-id="@movie.Id" data-type="movie">
                                <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                                </svg>
                            </button>
                            <div class="card-actions">
                                <button class="action-btn notify-me" data-movie-id="@movie.Id">Notify Me</button>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(movie.Status))
                        {
                            <div class="card-badge status-badge">@movie.Status</div>
                        }
                    </div>
                    <div class="card-content">
                        <h3 class="card-title">@movie.Title</h3>
                        <div class="card-meta">
                            <span class="card-rating">@movie.Rating</span>
                            <span class="card-separator">•</span>
                            <span class="card-language">@movie.Language</span>
                            @if (!string.IsNullOrEmpty(movie.Duration))
                            {
                                <span class="card-separator">•</span>
                                <span class="card-duration">@movie.Duration</span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(movie.Genre))
                        {
                            <div class="card-genre">@movie.Genre</div>
                        }
                        <div class="card-release-date">Releasing: @movie.ReleaseDate</div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<!-- Experience Formats -->
<section class="formats-section">
    <div class="container">
        <h2 class="section-title">Experience in Premium Formats</h2>
        <div class="formats-grid">
            <div class="format-card">
                <div class="format-icon">🎬</div>
                <h3 class="format-title">IMAX</h3>
                <p class="format-description">Larger-than-life cinematic experience</p>
            </div>
            <div class="format-card">
                <div class="format-icon">🕶️</div>
                <h3 class="format-title">3D</h3>
                <p class="format-description">Immersive three-dimensional visuals</p>
            </div>
            <div class="format-card">
                <div class="format-icon">🎪</div>
                <h3 class="format-title">4DX</h3>
                <p class="format-description">Motion seats and environmental effects</p>
            </div>
            <div class="format-card">
                <div class="format-icon">🔊</div>
                <h3 class="format-title">Dolby Atmos</h3>
                <p class="format-description">Revolutionary surround sound</p>
            </div>
        </div>
    </div>
</section>

@section Styles {
    <link rel="stylesheet" href="~/css/movies-styles.css" />
}
@section Scripts {
    <script>
        $(document).ready(function() {
            // Filter functionality
            $('.filter-btn').on('click', function() {
                const filterType = $(this).data('filter') || $(this).data('genre') || $(this).data('format');
                const filterCategory = $(this).data('filter') ? 'language' : 
                                     $(this).data('genre') ? 'genre' : 'format';
                
                // Update active state
                if (filterCategory === 'language') {
                    $('.filter-btn[data-filter]').removeClass('active');
                }
                $(this).toggleClass('active');
                
                // Apply filters
                applyFilters();
            });
            
            // Clear all filters
            $('.clear-filters-btn').on('click', function() {
                $('.filter-btn').removeClass('active');
                $('.filter-btn[data-filter="all"]').addClass('active');
                $('.movie-card').show();
            });
            
            // View toggle
            $('.view-toggle').on('click', function() {
                const view = $(this).data('view');
                $('.view-toggle').removeClass('active');
                $(this).addClass('active');
                
                $('.movies-grid').attr('data-view', view);
            });
            
            // Book tickets functionality
            $('.book-tickets').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const movieId = $(this).data('movie-id');
                // In a real app, this would navigate to booking page
                window.location.href = `/booking/movie/${movieId}`;
            });
            
            // Notify me functionality
            $('.notify-me').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const movieId = $(this).data('movie-id');
                $(this).text('✓ Notified').addClass('notified');
                
                // In a real app, this would save notification preference
                console.log(`Set notification for movie ${movieId}`);
            });
            
            function applyFilters() {
                const activeLanguage = $('.filter-btn[data-filter].active').data('filter');
                const activeGenres = $('.filter-btn[data-genre].active').map(function() {
                    return $(this).data('genre');
                }).get();
                const activeFormats = $('.filter-btn[data-format].active').map(function() {
                    return $(this).data('format');
                }).get();
                
                $('.movie-card').each(function() {
                    const card = $(this);
                    const cardLanguage = card.data('language');
                    const cardGenre = card.data('genre');
                    
                    let showCard = true;
                    
                    // Language filter
                    if (activeLanguage && activeLanguage !== 'all' && cardLanguage !== activeLanguage) {
                        showCard = false;
                    }
                    
                    // Genre filter
                    if (activeGenres.length > 0 && !activeGenres.includes(cardGenre)) {
                        showCard = false;
                    }
                    
                    // Show/hide card with animation
                    if (showCard) {
                        card.fadeIn(300);
                    } else {
                        card.fadeOut(300);
                    }
                });
            }
            
            // Initialize filters based on URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const language = urlParams.get('language');
            const genre = urlParams.get('genre');
            
            if (language) {
                $(`.filter-btn[data-filter="${language}"]`).addClass('active');
                $('.filter-btn[data-filter="all"]').removeClass('active');
            }
            
            if (genre) {
                $(`.filter-btn[data-genre="${genre}"]`).addClass('active');
            }
            
            if (language || genre) {
                applyFilters();
            }
        });
    </script>
}